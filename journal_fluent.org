* save residuals
#+BEGIN_SRC  scheme
(display "Save the residual in a file") (newline)
(let (( writefile (lambda (p)
        (define np (length (residual-history "iteration")))
        (let loop ((i 0))
        (if (not (= i np))
        (begin (define j (+ i 1))
	(display (list-ref (residual-history "iteration") (- np j)) p) (display " " p)
	(display (list-ref (residual-history "continuity") (- np j)) p) (display " " p)
	(display (list-ref (residual-history "x-velocity") (- np j)) p) (display " " p)
	(display (list-ref (residual-history "y-velocity") (- np j)) p) (display " " p)
	(display (list-ref (residual-history "z-velocity") (- np j)) p) (display " " p)
	(display (list-ref (residual-history "k") (- np j)) p) (display " " p)
	(display (list-ref (residual-history "epsilon") (- np j)) p)
	(newline p)
	(loop (+ i 1)
         )
	)
	)
	)
	) 
	(output-port (open-output-file "output.dat")))
	(writefile output-port)
	(close-output-port output-port))
#+END_SRC
